datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @unique
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ZiraCloud         ZiraCloud?
  ZiraDocsUserAllow ZiraDocsUserAllow[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model ZiraCloud {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  workspaceName String

  ZiraFavLink ZiraFavLink[]
  ZiraDocs ZiraDocs?
  //ZiraLinuxCommandBlock ZiraLinuxCommandBlock?
}

//ZIRA FAV LINK START
//ZIRA FAV LINK START
//ZIRA FAV LINK START

model ZiraFavLink {
  id String @id @default(uuid())

  ZiraCloud   ZiraCloud @relation(fields: [ziraCloudId], references: [id], onDelete: Cascade)
  ziraCloudId String

  url String
}

//ZIRA FAV LINK END
//ZIRA FAV LINK END
//ZIRA FAV LINK END

//ZIRA DOCS START
//ZIRA DOCS START
//ZIRA DOCS START

model ZiraDocs {
  id String @id @default(uuid())

  ZiraCloud   ZiraCloud @relation(fields: [ziraCloudId], references: [id], onDelete: Cascade)
  ziraCloudId String    @unique

  ZiraDocsPage ZiraDocsPage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ZiraDocsPage {
  id String @id @default(uuid())

  ZiraDocs   ZiraDocs @relation(fields: [ziraDocsId], references: [id], onDelete: Cascade)
  ziraDocsId String

  name    String
  content String

  publish   Boolean
  shareWith ZiraDocsUserAllow[]
}

model ZiraDocsUserAllow {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String

  permission     String
  ZiraDocsPage   ZiraDocsPage @relation(fields: [ziraDocsPageId], references: [id], onDelete: Cascade)
  ziraDocsPageId String
}

//ZIRA DOCS END
//ZIRA DOCS END
//ZIRA DOCS END

//ZIRA LINUX COMMAND BLOCK START
//ZIRA LINUX COMMAND BLOCK START
//ZIRA LINUX COMMAND BLOCK START

//model ZiraLinuxCommandBlock {
//  id String @id @default(auto()) @map("_id") @db.ObjectId
//
//  ZiraCloud   ZiraCloud @relation(fields: [ziraCloudId], references: [id], onDelete: Cascade)
//  ziraCloudId String    @unique @db.ObjectId
//
//  commandBlockMap ZiraLinuxCommandBlockMap[]
//}
//
//model ZiraLinuxCommandBlockMap {
//  id String @id @default(auto()) @map("_id") @db.ObjectId
//
//  ZiraLinuxCommandBlock   ZiraLinuxCommandBlock? @relation(fields: [ziraLinuxCommandBlockId], references: [id])
//  ziraLinuxCommandBlockId String?                @db.ObjectId
//
//  title       String
//  description String?
//
//  commandBlockSchema ZiraLinuxCommandBlockSchema[]
//}
//
//model ZiraLinuxCommandBlockSchema {
//  id String @id @default(auto()) @map("_id") @db.ObjectId
//
//  ZiraLinuxCommandBlockMap   ZiraLinuxCommandBlockMap? @relation(fields: [ziraLinuxCommandBlockMapId], references: [id])
//  ziraLinuxCommandBlockMapId String?                   @db.ObjectId
//
//  command_object String
//  type String
//}
//
//model ZiraLinuxCommandBlockMapSetting {
//  id String @id @default(auto()) @map("_id") @db.ObjectId
//
//  shareWith ZiraLinuxCommandBlockUserAllow[]
//}
//
//model ZiraLinuxCommandBlockUserAllow {
//  id String @id @default(auto()) @map("_id") @db.ObjectId
//
//  user   User   @relation(fields: [userId], references: [id])
//  userId String @db.ObjectId
//
//  ZiraLinuxCommandBlockMapSetting   ZiraLinuxCommandBlockMapSetting? @relation(fields: [ziraLinuxCommandBlockMapSettingId], references: [id])
//  ziraLinuxCommandBlockMapSettingId String?                          @db.ObjectId
//
//  permission String
//}

//ZIRA LINUX COMMAND BLOCK END
//ZIRA LINUX COMMAND BLOCK END
//ZIRA LINUX COMMAND BLOCK END
